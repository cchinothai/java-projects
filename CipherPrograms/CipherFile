/**
 * Program 5a
 * Program reads the command line input to identify what is being coded or decoded, using the given cipher key.
 * Task will be accomplished by using a created Scanner and PrintWriter to read in the file and write to it. Methods for
 * encoding and decoding are called (using a helper method) to return the proper message. Exceptions are handled by
 * rethrowing the error in the method header and sorting out the errors within the main method's catch blocks.
 * CS108-3
 * 10/27/2020
 * @author Cody Chinothai
 */
//package com.cody.main;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Cipher {
    public static final int NUM_LETTERS = 26;
    public static final int ENCODE = 1;
    public static final int DECODE = 2;

    public static void main(String[] args) throws Exception {

        if (args.length < 1) {
            throw new Exception("Invalid Input");
        }
        //args example: Messagefile secretword 1

        //extract arg input into variables
        int action = Integer.parseInt(args[2]);
        String cipherkey = args[1];
        String inputFilename = args[0];
        String outputFileName = getOutputFileName(inputFilename, action);
        try {


            //read in data and output to file
            //convert letters to lowercase for output
            if (action < 1 || action > 2)
                throw new Exception("Option " + action + " is not valid");
            Scanner input = openInput(inputFilename);
            PrintWriter output = openOutput(outputFileName);
            if (action == ENCODE) {
                while (input.hasNextLine()) {
                    String encryption = encode(input.nextLine(), cipherkey);
                    String lower = encryption.toLowerCase();
                    output.print(lower + " ");
                }
            }
            else if (action == DECODE) {
                while (input.hasNextLine()) {
                    String decryption = decode(input.nextLine(), cipherkey);
                    String lower = decryption.toLowerCase();
                    output.print(lower + " ");
                }
            }

            output.flush();
            //close streams
            input.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());

        }

    }

    public static Scanner openInput(String file) throws FileNotFoundException {
        File f = new File(file);
        Scanner in = new Scanner(f);
        return in;
    }

    public static PrintWriter openOutput(String out) throws FileNotFoundException {
        PrintWriter pw = new PrintWriter(out);
        return pw;
    }

    public static String getOutputFileName(String file, int action) {
        String outputfile = "" + file;
        if (action == ENCODE) {
            outputfile = file + ".coded";
        } else if (action == DECODE) {

            outputfile += ".decoded";
        }
        return outputfile;
    }

    public static String encode(String message, String key) {
        String encoded = "";
        int keyPosition = 0;
        for (int i = 0; i < message.length(); i++) {
            if (keyPosition == key.length())
                keyPosition = 0;

            char m = message.charAt(i);
            char keyLetter = key.charAt(keyPosition);
            //String keyLetter = key.substring(keyPosition,keyPosition+1);
            String alphabet = "abcdefghijklmnopqrstuvwxyz";
            int keyVal = alphabet.indexOf(keyLetter);
            char shiftedChar = shiftUpByK(m,keyVal);
            String shiftedLetter = String.valueOf(shiftedChar);
            encoded += shiftedLetter;

            keyPosition++;
        }
        return encoded;
    }


    public static String decode(String encoded, String key) {
        String decoded = "";
        int keyPosition = 0;
        for (int i = 0; i < encoded.length(); i++) {
            if (keyPosition == key.length())
                keyPosition = 0;

            char m = encoded.charAt(i);
            char keyLetter = key.charAt(keyPosition);
            String alphabet = "abcdefghijklmnopqrstuvwxyz";
            int keyVal = alphabet.indexOf(keyLetter);
            char shiftedChar = shiftUpByK(m,26-keyVal);
            String shiftedLetter = String.valueOf(shiftedChar);
            decoded += shiftedLetter;

            keyPosition++;
        }
        return decoded;
    }

    public static char shiftUpByK(char c, int offset) {
        if ('a' <= c && c <= 'z')
            return (char) ('a' + (c - 'a' + offset) % NUM_LETTERS);
        else if ('A' <= c && c <= 'Z')
            return (char) ('A' + (c - 'A' + offset) % NUM_LETTERS);
        return c;
    }


    public String getInfo()
    { return
            "Program 3, Cody Chinothai";
    }



}
